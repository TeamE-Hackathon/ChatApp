AWSTemplateFormatVersion: "2010-09-09"

Description: chat app for alb

#======================
# パラメーター
#======================
Parameters:
  # プロジェクト名を入力する。各リソースのNameタグの値となる。
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String

Resources:
  #======================
  ##### ALB作成 #####
  #======================
  # ターゲットを管理する
  ApplicationServiceTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Protocol: HTTP
      Port: 3001 # ①を3001に転送する。api側は、3001番で待ち受けている
      VpcId: !ImportValue VPC
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30
      TargetType: ip
  # リスナー(HTTPヘッダがXXXだったら、IPアドレスがXXXXだったら、YYYYというアクションをする。複数持て優先度を決めれる)
  ApplicationLoadBalancerHttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Protocol: HTTP # 本当はHTTPsも必要
      Port: 3001 # ①
      # リスナールールなし
      DefaultActions: # 80番ポートを待ち受けて、転送するだけのアクション
        - TargetGroupArn: !Ref ApplicationServiceTargetGroup
          Type: forward
      # Protocol: HTTPS
      # Port: 3001
      # Certificates:
      #   #   # ACM でtokyoとバージニアそれぞれでドメイン取得している
      #   - CertificateArn: !Sub arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/082844c8-ac7c-4692-b918-746f54ed9df0
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing # 反対は、internal
      Subnets:
        - !ImportValue PublicSubnetA
        - !ImportValue PublicSubnetB
      SecurityGroups:
        - !Ref ALBSecurityGroup
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 30
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-alb # ecsのサービスで指定する
  # セキュリティグループ（ALBに対して）
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Application Load Balancer Security Group
      VpcId: !ImportValue VPC
      SecurityGroupIngress:
        # ssl終端とするのでHTTPは不要
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        # front <- alb <- ecs
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
        # front -> alb -> ecs
        - IpProtocol: tcp
          FromPort: 3001
          ToPort: 3001
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-alb-sg
  # ACM:
  #   Type: AWS::CertificateManager::Certificate
  #   Properties:
  #     DomainName:
  #     DomainValidationOptions:
  #       - DomainName: "*.chachat.tk"
  #         HostedZoneId: !Sub "${HostZoneId}"
  #     ValidationMethod: DNS
  # セキュリティグループ（EC2用 EC2はALBからの通信を許可）
  # ApplicationLoadBalancerToApplicationIngress:
  #   Type: AWS::EC2::SecurityGroupIngress
  #   Properties:
  #     IpProtocol: tcp
  #     FromPort: 32768
  #     ToPort: 60999
  #     GroupId: !Ref ApplicationAutoscalingSecurityGroup
  #     SourceSecurityGroupId: !Ref ALBSecurityGroup
  # セキュリティグループ（ALBはEC2への通信を許可）
  # ApplicationLoadBalancerToApplicationEgress:
  #   Type: AWS::EC2::SecurityGroupEgress
  #   Properties:
  #     IpProtocol: tcp
  #     FromPort: 32768
  #     ToPort: 60999
  #     GroupId: !Ref ALBSecurityGroup
  #     DestinationSecurityGroupId: !Ref ApplicationAutoscalingSecurityGroup

#======================
# アウトプット
#======================

Outputs:
  PublicURL:
    Description: Public DNS name of Application Load Balancer
    Value: !Sub ${ApplicationLoadBalancer.DNSName}

  ApplicationServiceTargetGroup:
    Description: alb target group
    Value: !Ref ApplicationServiceTargetGroup
    Export:
      Name: "ApplicationServiceTargetGroup"
